<div id="profilesModule">
    <div id="profiles-container">
        <p>Perfil Bancario para transferencia</p>

        <select id="profile-select">
            <option value="0" selected disabled>Seleciona un perfil</option>
        </select>

        <button id="copy-btn">Copiar datos de pago</button>
        <button id="delete-btn">Eliminar datos de pago</button>
    </div>
    <div id="form-container">
        <p>Crear Nuevo Perfil</p>
        <form id="paymentProfileForm">
            <label for="name">Nombre completo:</label>
            <input type="text" id="name" required />

            <label for="idNumber">Cédula:</label>
            <input type="text" id="idNumber" required />

            <label for="phone">Teléfono:</label>
            <input type="tel" id="phone" required />

            <label for="bank">Banco:</label>
            <select id="bank" required>
                <option value="" disabled selected>Seleccione un banco</option>
                <option value="0102 - BANCO DE VENEZUELA"
                    >0102 - BANCO DE VENEZUELA</option
                >
                <option value="0104 - BANCO VENEZOLANO DE CREDITO"
                    >0104 - BANCO VENEZOLANO DE CREDITO</option
                >
                <option value="0105 - BANCO MERCANTIL"
                    >0105 - BANCO MERCANTIL</option
                >
                <option value="0108 - BBVA PROVINCIAL"
                    >0108 - BBVA PROVINCIAL</option
                >
                <option value="0114 - BANCARIBE">0114 - BANCARIBE</option>
                <option value="0115 - BANCO EXTERIOR"
                    >0115 - BANCO EXTERIOR</option
                >
                <option value="0128 - BANCO CARONI">0128 - BANCO CARONI</option>
                <option value="0134 - BANESCO">0134 - BANESCO</option>
                <option value="0137 - BANCO SOFITASA"
                    >0137 - BANCO SOFITASA</option
                >
                <option value="0138 - BANCO PLAZA">0138 - BANCO PLAZA</option>
                <option value="0146 - BANGENTE">0146 - BANGENTE</option>
                <option value="0151 - BANCO FONDO COMUN"
                    >0151 - BANCO FONDO COMUN</option
                >
                <option value="0156 - 100% BANCO">0156 - 100% BANCO</option>
                <option value="0157 - DELSUR BANCO UNIVERSAL"
                    >0157 - DELSUR BANCO UNIVERSAL</option
                >
                <option value="0163 - BANCO DEL TESORO"
                    >0163 - BANCO DEL TESORO</option
                >
                <option value="0166 - BANCO AGRICOLA DE VENEZUELA"
                    >0166 - BANCO AGRICOLA DE VENEZUELA</option
                >
                <option value="0168 - BANCRECER">0168 - BANCRECER</option>
                <option value="0171 - BANCO ACTIVO">0171 - BANCO ACTIVO</option>
                <option value="0172 - BANCAMIGA BANCO UNIVERSAL, C.A."
                    >0172 - BANCAMIGA BANCO UNIVERSAL, C.A.</option
                >
                <option value="0173 - BANCO INTERNACIONAL DE DESARROLLO"
                    >0173 - BANCO INTERNACIONAL DE DESARROLLO</option
                >
                <option value="0174 - BANPLUS">0174 - BANPLUS</option>
                <option
                    value="0175 - BANCO DIGITAL DE LOS TRABAJADORES, BANCO UNIVERSAL"
                    >0175 - BANCO DIGITAL DE LOS TRABAJADORES, BANCO UNIVERSAL</option
                >
                <option value="0177 - BANFANB">0177 - BANFANB</option>
                <option value="0191 - BANCO NACIONAL DE CREDITO"
                    >0191 - BANCO NACIONAL DE CREDITO</option
                >
                <option value="0601 - INSTITUTO MUNICIPAL DE CREDITO POPULAR"
                    >0601 - INSTITUTO MUNICIPAL DE CREDITO POPULAR</option
                >
            </select>

            <label for="accountNumber">Número de cuenta:</label>
            <input type="number" id="accountNumber" />

            <button type="submit">Guardar Perfil</button>
        </form>
    </div>
</div>

<style is:inline scoped>
    #profilesModule {
        max-width: 500px;
        padding: 0px 15px;
        margin: 12px auto;
    }
    #profilesModule p,
    #profilesModule label {
        margin-bottom: 12px;
    }
    #profiles-container {
        margin: 12px 0;
    }
    #paymentProfileForm input {
        margin: 6px 0;
        width: 100%;
    }
    #copy-btn,
    #delete-btn {
        width: 100%;
        padding: 15px;
    }

    #copy-btn,
    #delete-btn {
        margin-top: 8px;
        border: none;
        color: white;
    }

    #copy-btn {
        background-color: var(--primary);
    }
    #delete-btn {
        background-color: var(--danger);
    }
    #copy-btn::before,
    #delete-btn::before {
        content: "";
        display: inline-block;
        width: 16px;
        height: 16px;
        background-repeat: no-repeat;
        background-position: center;
        margin-right: 8px;
        margin-bottom: -3px;
    }
    #copy-btn::before {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect width='8' height='4' x='8' y='2' rx='1' ry='1'%3E%3C/rect%3E%3Cpath d='M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2'%3E%3C/path%3E%3C/svg%3E");
    }

    #delete-btn::before {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M3 6h18'%3E%3C/path%3E%3Cpath d='M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2'%3E%3C/path%3E%3C/svg%3E");
    }
</style>

<script is:inline>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("paymentProfileForm");
        const profileSelect = document.getElementById("profile-select");
        const copyBtn = document.getElementById("copy-btn");
        copyBtn.addEventListener("click", copyProfileData);
        const deleteBtn = document.getElementById("delete-btn");
        deleteBtn.addEventListener("click", deleteProfile);
        profileSelect.addEventListener("change", handleProfile);

        // Cargar perfiles guardados al iniciar
        loadProfiles();

        // Manejar el envío del formulario
        form.addEventListener("submit", function (e) {
            e.preventDefault();
            if (validateForm()) {
                // Si la validación es exitosa, guardar el perfil
                const newProfile = {
                    id: Date.now(),
                    name: document.getElementById("name").value.trim(),
                    idNumber: document.getElementById("idNumber").value.trim(),
                    phone: document.getElementById("phone").value.trim(),
                    bank: document.getElementById("bank").value.trim(),
                    accountNumber: document.getElementById("accountNumber").value.trim(),
                    selected: "no",
                };
                // Guardar + actualizar UI de forma óptima
                const success = saveProfile(newProfile);
                if (success) {
                    loadProfiles({ createProfile: newProfile }); // Actualiza solo el nuevo
                    alert("Perfil guardado correctamente");
                } else {
                    alert("Error: Perfil duplicado o inválido");
                }
                // Recargar la lista de perfiles

                // Resetear el formulario
                form.reset();
            }
        });

        function validateForm() {
            // Obtener valores
            const name = document.getElementById("name").value.trim();
            const idNumber = document.getElementById("idNumber").value.trim();
            const phone = document.getElementById("phone").value.trim();
            const bank = document.getElementById("bank").value.trim();
            const accountNumber = document.getElementById("accountNumber").value.trim()
            // 1. Validar que ningún campo esté vacío
            if (!name || !idNumber || !phone || !bank) {
                alert("¡Todos los campos son obligatorios!");
                return false;
            }

            // 2. Validar formato del nombre (solo letras y espacios)
            if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$/.test(name)) {
                alert("¡El nombre solo puede contener letras y espacios!");
                return false;
            }

            // 3. Validar ID (ejemplo: número de cédula/DNI, alfanumérico)
            if (!/^[a-zA-Z0-9-]+$/.test(idNumber)) {
                alert("¡El número de identificación no es válido!");
                return false;
            }

            // 4. Validar teléfono (solo números, + opcional para internacional)
            if (!/^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/.test(phone) ) {
                alert("¡Ingresa un número de teléfono válido!");
                return false;
            }

            // 5. Validar banco (no vacío y sin caracteres extraños)
            if (!/^[a-zA-Z0-9\s\-]+$/.test(bank)) {
                alert("¡Nombre del banco no válido!");
                return false;
            }
            if(!/^[0-9]+$/.test(normalizedAccount)){
                alert("¡Ingresa un número de cuenta valido!");
                return false;
            }
            // Si todo está correcto
            return true;
        }
        // Función para guardar un perfil en localStorage
        function saveProfile(profile) {
            try {
                // Validaciones
                if (!profile || typeof profile !== "object") {
                    throw new Error("El perfil debe ser un objeto");
                }
                if (!profile.id) {
                    throw new Error("El perfil debe tener un ID único");
                }

                // Leer y validar datos existentes
                const profiles = getSavedProfiles(); // Función segura que usa try-catch
                if (profiles.some((p) => p.id === profile.id)) {
                    console.warn("Perfil duplicado, no se guardará");
                    return false;
                }

                // Guardar
                profiles.push(profile);
                localStorage.setItem(
                    "paymentProfiles",
                    JSON.stringify(profiles),
                );
                return true;
            } catch (error) {
                console.error("Error al guardar el perfil:", error);
                return false;
            }
        }

        // Función para cargar los perfiles desde localStorage
        function loadProfiles(
            params = { deleteID: false, createProfile: false },
        ) {
            const profiles =
                JSON.parse(localStorage.getItem("paymentProfiles")) || [];
            //console.log(profiles)

            if (params.createProfile) {
                const option = document.createElement("option");
                option.value = params.createProfile.id; // Puedes usar el ID como valor
                option.textContent = `${params.createProfile.name} - ${params.createProfile.bank}`;
                profileSelect.appendChild(option);
            }
            if (params.deleteID) {
                // Recargar la lista
                const optionToRemove = profileSelect.querySelector(
                    `option[value="${params.deleteID}"]`,
                );
                if (optionToRemove) {
                    optionToRemove.remove();
                }
            }
            if (!params.createProfile && !params.deleteID) {
                if (profiles.length === 0) return;
                // Agregar opciones para cada perfil usando for
                for (let i = 0; i < profiles.length; i++) {
                    const profile = profiles[i];
                    const option = document.createElement("option");
                    option.value = profile.id; // Puedes usar el ID como valor
                    option.textContent = `${profile.name} - ${profile.bank}`;

                    if (profile.selected === "si") {
                        option.selected = true;
                    }
                    profileSelect.appendChild(option);
                }
            }
        }

        // Función para copiar los datos del perfil al portapapeles
        function copyProfileData() {
            const profileId = parseInt(profileSelect.value);
            const profiles =
                JSON.parse(localStorage.getItem("paymentProfiles")) || [];
            const profile = profiles.find((p) => p.id === profileId);

            if (profile) {
                const textToCopy = `
                Nombre: ${profile.name}
                Cédula: ${profile.idNumber}
                Teléfono: ${profile.phone}
                Banco: ${profile.bank}
                Número de cuenta: ${profile.accountNumber}
            `;

                navigator.clipboard
                    .writeText(textToCopy)
                    .then(() => {
                        alert("Datos copiados al portapapeles");
                    })
                    .catch((err) => {
                        console.error("Error al copiar: ", err);
                    });
            }
        }

        // Función para eliminar un perfil
        function deleteProfile() {
            const profileId = parseInt(profileSelect.value);
            if (
                confirm(
                    `¿Estás seguro de que quieres eliminar el perfil ${profileId} ?`,
                )
            ) {
                let profiles =
                    JSON.parse(localStorage.getItem("paymentProfiles")) || [];

                // Filtrar para eliminar el perfil seleccionado
                profiles = profiles.filter((p) => p.id !== profileId);

                // Guardar los cambios
                localStorage.setItem(
                    "paymentProfiles",
                    JSON.stringify(profiles),
                );

                loadProfiles({ deleteID: profileId });
            }
        }

        // 2. Función que maneja el cambio de selección
        function handleProfile(event) {
            const selectedProfileId = Number(event.target.value); // Obtiene el ID del perfil seleccionado

            // 3. Obtener perfiles del localStorage (o usar un array vacío si no existen)
            const profiles =
                JSON.parse(localStorage.getItem("paymentProfiles")) || [];

            // 4. Actualizar la propiedad 'selected' de todos los perfiles
            const updatedProfiles = [];
            for (let i = 0; i < profiles.length; i++) {
                const profile = profiles[i];
                updatedProfiles.push({
                    ...profile,
                    selected: profile.id === selectedProfileId ? "si" : "no",
                });
            }

            // 5. Guardar los perfiles actualizados en localStorage
            localStorage.setItem(
                "paymentProfiles",
                JSON.stringify(updatedProfiles),
            );
        }
    });
</script>
