---
import Layout from "../layouts/Layout.astro"

interface Tasa {
  nombre: string;
  compra?: number;
  venta?: number;
  promedio?: number;
  fechaActualizacion?: string;
}

const api = "https://ve.dolarapi.com/v1/dolares";
// Función con caché simple para evitar múltiples fetches
let cachedTasas: Tasa[] | null = null;

const getTasas = async (): Promise<Tasa[]> => {
  if (cachedTasas) return cachedTasas;

  try {
    const response = await fetch(api, {
      headers: {
        "Cache-Control": "max-age=300", // Cache de 5 minutos
      },
    });

    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

    const data: Tasa[] = await response.json();

    const promedio = calcularNuevoPromedio(data);
    const tasasConPromedio = data.map((item) => ({
      ...item,
      nombre: item.nombre === "Bitcoin" ? "Promedio" : item.nombre,
      promedio:
        item.nombre === "Bitcoin"
          ? parseFloat(promedio.toFixed(2))
          : item.promedio,
    }));

    cachedTasas = tasasConPromedio;
    return tasasConPromedio;
  } catch (error) {
    console.error("Error fetching tasas:", error);
    return [];
  }
};

function calcularNuevoPromedio(tasas: Tasa[]): number {
  const tasasValidas = tasas.filter(
    (t) => t.nombre !== "Bitcoin" && typeof t.promedio === "number",
  );

  if (tasasValidas.length === 0) return 0;

  const suma = tasasValidas.reduce((acc, t) => acc + (t.promedio || 0), 0);
  return suma / tasasValidas.length;
}

const tasas = await getTasas();
---

<Layout title="Home"> 
<div class="banner-app">
    <span class="currency-symbol">$</span>
    <input
      id="clientAmount"
      type="number"
      step="0.01"
      value="1"
      placeholder="20"
      min="0"
    />
</div>

<table class="compact-table">
  <thead>
    <tr>
      <th>Monitor</th>
      <th>Precio</th>
      <th>Compartir</th>
    </tr>
  </thead>
  <tbody>
    {
      tasas.map((tasa) => (
        <tr id={tasa.nombre}>
          <td>{tasa.nombre}</td>
          <td class="price-value" data-original={tasa.promedio}>
            <b>{tasa.promedio}</b>
          </td>
          <td>
            <svg
              class="share-icon"
              fill="#fff"
              height="24px"
              width="24px"
              viewBox="0 0 490 490"
            >
              <path d="M245,490c135.31,0,245-109.69,245-245C490,109.69,380.31,0,245,0S0,109.69,0,245C0,380.31,109.69,490,245,490z M245,30.625 c118.207,0,214.375,96.168,214.375,214.375S363.207,459.375,245,459.375S30.625,363.207,30.625,245S126.793,30.625,245,30.625z" />
              <path d="M137.499,304.69c15.674,0,29.948-6.083,40.611-16l78.128,36.678c-0.583,3.341-0.904,6.771-0.904,10.276 c0,32.913,26.782,59.695,59.695,59.695c32.913,0,59.695-26.782,59.695-59.695c0-32.913-26.782-59.695-59.695-59.695 c-18.454,0-34.978,8.422-45.937,21.621l-74.543-34.995c1.717-5.561,2.646-11.464,2.646-17.581c0-4.942-0.615-9.741-1.753-14.337 l75.93-35.646c10.906,11.704,26.437,19.043,43.657,19.043c32.913,0,59.695-26.782,59.695-59.695 c0-32.913-26.782-59.695-59.695-59.695c-32.913,0-59.695,26.782-59.695,59.695c0,4.681,0.559,9.232,1.583,13.606l-76.295,35.817 c-10.876-11.376-26.181-18.484-43.123-18.484c-32.913,0-59.695,26.782-59.695,59.695S104.586,304.69,137.499,304.69z M315.028,306.574c16.03,0,29.07,13.04,29.07,29.07c0,16.03-13.04,29.07-29.07,29.07c-16.03,0-29.07-13.04-29.07-29.07 C285.958,319.614,298.998,306.574,315.028,306.574z M315.028,125.291c16.03,0,29.07,13.039,29.07,29.07 c0,16.03-13.04,29.07-29.07,29.07c-16.03,0,29.07-13.04,29.07-29.07C285.958,138.331,298.998,125.291,315.028,125.291z M137.499,215.925c16.03,0,29.07,13.04,29.07,29.07s-13.039,29.07-29.07,29.07s-29.07-13.04-29.07-29.07 S121.468,215.925,137.499,215.925z" />
            </svg>
          </td>
        </tr>
      ))
    }
  </tbody>
</table>
</Layout>

<style>
  /* Estilos base para la tabla */
  .compact-table {
    border-collapse: collapse;
    width: min-content;
    margin: auto;
  }

  .compact-table th,
  .compact-table td {
    padding: 3px;
    text-transform: uppercase;
    border-bottom: 1px solid #e2e8f0;
    font-size: 1.4rem;
  }

  .compact-table td {
    font-size: 0.9rem;
    opacity: 0.8;
  }

  /* Estilos específicos para celdas */

  .compact-table td:last-child, .compact-table th:last-child {
    text-align: end;
  }

  .compact-table tr:hover td {
    background-color: #2e2e2e;
  }

  /* Estilos para el input */
  .currency-symbol {
    font-size: 2.5rem;
    font-weight: bold;
  }

  #clientAmount {
    background: transparent;
    border: none;
    color: white;
    font-size: 2.5rem;
    font-weight: bold;
    text-align: center;
    width: auto;
    min-width: 80px;
    max-width: 200px;
    padding: 5px;
    outline: none;
    box-sizing: content-box;
    -moz-appearance: textfield;
  }

  #clientAmount::-webkit-outer-spin-button,
  #clientAmount::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* Icono de compartir */
  .share-icon {
    cursor: pointer;
    transition: transform 0.2s;
  }

  .share-icon:hover {
    transform: scale(1.1);
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const amountInput = document.getElementById("clientAmount");
    const priceElements = document.querySelectorAll(".price-value");

    function updatePrices() {
      const amount = parseFloat(amountInput.value) || 1;

      priceElements.forEach((el) => {
        const originalPrice = parseFloat(el.dataset.original);
        el.textContent = (originalPrice * amount).toFixed(2);
      });
    }

    amountInput.addEventListener("input", updatePrices);

    // Inicializar
    updatePrices();
  });
</script>