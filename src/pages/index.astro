---
import Layout from "../layouts/Layout.astro";

const apiUrl = "https://pydolarve.org/api/v2/dollar?page=alcambio&format_date=default&rounded_price=true";
---

<Layout title="Calculadora">
  <div class="calcApp">
    <div id="typeCurrency">
      <p id="typeConversionInfo">Dólares a Bolívares</p>
      <label>
        <input type="radio" name="currency" value="usd" checked />
        <p class="currency-label">USD</p>
      </label>
      <label>
        <input type="radio" name="currency" value="ves" />
        <p class="currency-label">VES</p>
      </label>
    </div>
    
    <div class="containerAmountInput">
      <p style="display: block; width:100%;">Monto</p>
      <input type="number" name="amountInput" id="amountInput" step="0.01" value="1" placeholder="15">
      <button id="btnToggleCurrency" data-to="ves">USD</button>
      <button>$10</button> <button>$15</button> <button>$20</button> <button>$50</button> <button>$100</button>
    </div>

    <div class="tasas">
      <strong>Tasa a utilizar</strong>
      <ul class="rowTasas">
        <li>BCV (<span class="tasa">0</span>)</li>
        <li>Paralelo (<span class="tasa">0</span>)</li>
        <li>Promedio (<span class="tasa">0</span>)</li>
      </ul>
      <small id="lastUpdate" style="display:block; text-align:right; color:#666;"></small>
    </div>

    <div class="resultado">
      <small>Resultado</small>
      <strong id="resultValue">0</strong>
    </div>
  </div>
</Layout>

<style>
  .calcApp {
  max-width: 500px;
  min-width: 250px;
  margin: auto;
  padding: 15px;
}

.containerAmountInput {
  position: relative;
  margin-bottom: 20px;
}

.containerAmountInput input,
.containerAmountInput button:not(#btnToggleCurrency) {
  border: 1px solid var(--color-borders);
  border-radius: 5px;
  padding: 10px;
}

.containerAmountInput input {
  width: 100%;
  padding-right: 51px;
  border-radius: 8px;
}

.containerAmountInput #btnToggleCurrency {
  position: absolute;
  right: 1.5px;
  top: 26px;
  width: 50px;
  height: calc(100% - 3px);
  background: transparent;
  border: none;
  border-left: 1px solid var(--color-borders);
  border-radius: 0 7px 7px 0;
  cursor: pointer;
}

.containerAmountInput button:not(#btnToggleCurrency) {
  background: var(--bg-cards);
  margin: 5px 5px 0 0;
  cursor: pointer;
}

#typeCurrency {
  display: flex;
  flex-flow: row wrap;
  justify-content: space-between;
  margin-bottom: 20px;
}

#typeConversionInfo {
  width: 100%;
  margin-bottom: 10px;
  font-weight: bold;
  transition: 0.3s ease;
}

.currency-label {
  opacity: 0.5;
  transition: 0.3s ease;
  cursor: pointer;
  padding: 5px 10px;
  border-radius: 5px;
  margin-right: 5px;
}

#typeCurrency input[name="currency"] {
  display: none;
}

#typeCurrency input[name="currency"]:checked + .currency-label {
  background: var(--bg-cards);
  opacity: 1;
  font-weight: bold;
}

.rowTasas {
  list-style: none;
  padding: 0;
  margin: 10px 0;
}

.rowTasas li {
  margin-bottom: 8px;
  display: flex;
  align-items: center;
}

.rowTasas small {
  margin-left: 8px;
  font-size: 0.8em;
}

.rowTasas .tasa {
  font-weight: bold;
  margin-left: 5px;
}

.resultado {
  background-color: var(--bg-cards);
  border-radius: 10px;
  padding: 15px;
  text-align: center;
  margin-top: 20px;
}

.resultado small {
  color: var(--font-color);
  opacity: 0.8;
}

.resultado strong {
  color: var(--font-color);
  font-size: 1.5em;
  display: block;
  margin-top: 5px;
}

.error-message,
.change-indicator {
  font-size: 0.9em;
}

.error-message {
  color: #f44336;
  text-align: center;
  margin-top: 10px;
}

.change-indicator {
  margin: 0 10px;
  font-weight: bold;
}
</style>

<script is:inline>
// Constantes y configuración
const API_URL = "https://pydolarve.org/api/v2/dollar?page=alcambio&format_date=default&rounded_price=true";
const MIN_API_CALL_INTERVAL = 5000; // 5 segundos entre llamadas
const UPDATE_INTERVAL = 5 * 60 * 1000; // 5 minutos

// Estado de la aplicación
const state = {
  rates: {
    bcv: 0,
    paralelo: 0,
    promedio: 0
  },
  lastUpdate: null,
  lastApiCall: 0,
  selectedCurrency: 'usd'
};

// Cache de elementos DOM
const elements = {
  typeConversionInfo: document.getElementById("typeConversionInfo"),
  btnToggleCurrency: document.getElementById("btnToggleCurrency"),
  currencyRadios: document.querySelectorAll('input[name="currency"]'),
  amountInput: document.getElementById("amountInput"),
  resultValue: document.getElementById("resultValue"),
  lastUpdate: document.getElementById("lastUpdate"),
  tasas: {
    bcv: document.querySelector(".rowTasas li:nth-child(1) .tasa"),
    paralelo: document.querySelector(".rowTasas li:nth-child(2) .tasa"),
    promedio: document.querySelector(".rowTasas li:nth-child(3) .tasa")
  }
};

// Inicialización
document.addEventListener("DOMContentLoaded", () => {
  setupEventListeners();
  initializeApp();
});

// Configuración de event listeners
function setupEventListeners() {
  // Delegación de eventos para mejor performance
  document.getElementById("typeCurrency").addEventListener("change", (e) => {
    if (e.target.matches('input[name="currency"]')) {
      handleCurrencyChange(e.target.value);
    }
  });

  elements.btnToggleCurrency.addEventListener("click", toggleCurrency);
  elements.amountInput.addEventListener("input", debounce(calculateRates, 500));

  // Botones de monto rápido
  document.querySelectorAll(".containerAmountInput button:not(#btnToggleCurrency)").forEach(btn => {
    btn.addEventListener("click", () => {
      elements.amountInput.value = btn.textContent.replace('$', '');
      calculateRates();
    });
  });
}

// Inicializar la aplicación
async function initializeApp() {
  try {
    await fetchRates();
    // Configurar actualización periódica
    setInterval(fetchRates, UPDATE_INTERVAL);
  } catch (error) {
    showError("Error al cargar tasas iniciales");
  }
}

// Obtener tasas de la API con protección anti-scraping
async function fetchRates() {
  const now = Date.now();
  if (now - state.lastApiCall < MIN_API_CALL_INTERVAL) return;
  state.lastApiCall = now;

  try {
    const response = await fetch(API_URL, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });

    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    
    const data = await response.json();
    validateApiData(data);
    
    updateState(data);
    updateUI();
    calculateRates();

  } catch (error) {
    console.error("Error fetching rates:", error);
    showError("Error actualizando tasas. Intentando nuevamente...");
    setTimeout(fetchRates, 10000); // Reintentar después de 10 segundos
  }
}

// Validar datos de la API
function validateApiData(data) {
  if (!data?.monitors?.bcv?.price || !data?.monitors?.enparalelovzla?.price) {
    throw new Error("Datos de API incompletos");
  }
}

// Actualizar el estado de la aplicación
function updateState(data) {
  state.rates.bcv = data.monitors.bcv.price;
  state.rates.paralelo = data.monitors.enparalelovzla.price;
  state.rates.promedio = (state.rates.bcv + state.rates.paralelo) / 2;
  state.lastUpdate = `${data.datetime.date} ${data.datetime.time}`;
  state.selectedCurrency = document.querySelector('input[name="currency"]:checked').value;
  
  // Guardar datos completos de los monitores
  state.monitors = {
    bcv: data.monitors.bcv,
    paralelo: data.monitors.enparalelovzla
  };
}

// Actualizar la interfaz de usuario
function updateUI() {
  // Actualizar tasas con datos completos
  updateRateUI('bcv', state.rates.bcv, state.monitors.bcv);
  updateRateUI('paralelo', state.rates.paralelo, state.monitors.paralelo);
  
  // Calcular y mostrar datos para el promedio
  const promedioChange = ((state.monitors.bcv.change + state.monitors.paralelo.change) / 2).toFixed(2);
  const promedioPercent = ((state.monitors.bcv.percent + state.monitors.paralelo.percent) / 2).toFixed(2);
  const promedioColor = promedioChange > 0 ? 'green' : promedioChange < 0 ? 'red' : 'neutral';
  const promedioSymbol = promedioChange > 0 ? '▲' : promedioChange < 0 ? '▼' : '';
  
  elements.tasas.promedio.textContent = state.rates.promedio.toFixed(2);
  elements.tasas.promedio.parentElement.innerHTML = `
    Promedio (<span class="tasa">${state.rates.promedio.toFixed(2)}</span>)
    <span class="change-indicator" style="color:${promedioColor}">
      ${promedioSymbol} ${Math.abs(promedioChange)} (${promedioPercent}%)
    </span>
  `;
  
  elements.lastUpdate.textContent = `Actualizado: ${state.lastUpdate}`;
}

// Actualizar UI de cada tasa con indicadores de cambio
function updateRateUI(type, value, monitorData) {
  const rateElement = elements.tasas[type];
  const change = monitorData.change || 0;
  const percent = monitorData.percent || 0;
  const symbol = monitorData.symbol || '';
  const colorClass = getChangeColorClass(monitorData.color);
  
  rateElement.textContent = value.toFixed(2);
  rateElement.parentElement.innerHTML = `
    ${monitorData.title || type} (<span class="tasa" >${value.toFixed(2)}</span>)
    <span class="change-indicator" style="color:${monitorData.color};" >
      ${symbol} ${change} (${percent}%)
    </span>
  `;
}
// Función auxiliar para determinar clase de color
function getChangeColorClass(color) {
  return color === 'green' ? 'change-up' : 
         color === 'red' ? 'change-down' : 'change-neutral';
}
// Manejar cambio de moneda
function handleCurrencyChange(currency) {
  state.selectedCurrency = currency;
  updateCurrencyUI();
  calculateRates();
}

// Alternar moneda
function toggleCurrency() {
  const newCurrency = this.dataset.to;
  document.querySelector(`input[name="currency"][value="${newCurrency}"]`).checked = true;
  handleCurrencyChange(newCurrency);
}

// Actualizar UI de moneda
function updateCurrencyUI() {
  const isUSD = state.selectedCurrency === 'usd';
  
  elements.typeConversionInfo.textContent = isUSD 
    ? "Dólares a Bolívares" 
    : "Bolívares a Dólares";
  
  elements.btnToggleCurrency.textContent = isUSD ? "USD" : "VES";
  elements.btnToggleCurrency.dataset.to = isUSD ? "ves" : "usd";
}

// Calcular tasas con debounce
const calculateRates = debounce(function() {
  const amount = parseFloat(elements.amountInput.value) || 0;
  let result;
  
  if (state.selectedCurrency === 'usd') {
    result = amount * state.rates.paralelo;
  } else {
    result = amount / state.rates.paralelo;
  }
  
  elements.resultValue.textContent = formatCurrency(result);
}, 300);

// Formatear moneda
function formatCurrency(value) {
  return value.toLocaleString('es-VE', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
}

// Función debounce
function debounce(func, delay) {
  let timeoutId;
  return function(...args) {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func.apply(this, args), delay);
  };
}

// Mostrar errores
function showError(message) {
  const errorElement = document.createElement('div');
  errorElement.className = 'error-message';
  errorElement.textContent = message;
  
  const existingError = document.querySelector('.error-message');
  if (existingError) existingError.remove();
  
  document.querySelector('.calcApp').appendChild(errorElement);
  setTimeout(() => errorElement.remove(), 5000);
}
</script>